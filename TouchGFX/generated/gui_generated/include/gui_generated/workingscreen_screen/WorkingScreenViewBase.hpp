/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef WORKINGSCREENVIEWBASE_HPP
#define WORKINGSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/workingscreen_screen/WorkingScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/Image.hpp>

class WorkingScreenViewBase : public touchgfx::View<WorkingScreenPresenter>
{
public:
    WorkingScreenViewBase();
    virtual ~WorkingScreenViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::ScalableImage background_01;
    touchgfx::ScalableImage background_02;
    touchgfx::TextAreaWithOneWildcard AngleValue;
    touchgfx::TextAreaWithOneWildcard RadiusValue;
    touchgfx::TextAreaWithOneWildcard LoadValue;
    touchgfx::TextAreaWithOneWildcard SWLValue;
    touchgfx::Image noOverLoaded;
    touchgfx::Image Overloaded;
    touchgfx::Image AngleLimitButton;
    touchgfx::Image AngleLimitButton_A;
    touchgfx::Image ATBButton;
    touchgfx::Image ATBButton_A;
    touchgfx::Image BypassButton;
    touchgfx::Image BypassButton_A;

    /*
     * Wildcard Buffers
     */
    static const uint16_t ANGLEVALUE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar AngleValueBuffer[ANGLEVALUE_SIZE];
    static const uint16_t RADIUSVALUE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar RadiusValueBuffer[RADIUSVALUE_SIZE];
    static const uint16_t LOADVALUE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar LoadValueBuffer[LOADVALUE_SIZE];
    static const uint16_t SWLVALUE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar SWLValueBuffer[SWLVALUE_SIZE];

private:

};

#endif // WORKINGSCREENVIEWBASE_HPP
