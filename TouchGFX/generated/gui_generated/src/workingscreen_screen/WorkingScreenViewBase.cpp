/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/workingscreen_screen/WorkingScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

WorkingScreenViewBase::WorkingScreenViewBase()
{
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background_01.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_GRADIENT_LIGHT_ID));
    background_01.setPosition(0, 0, 480, 272);
    background_01.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(background_01);

    background_02.setBitmap(touchgfx::Bitmap(BITMAP_WORKINGSCREEN_01_ID));
    background_02.setPosition(-57, -22, 372, 302);
    background_02.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(background_02);

    AngleValue.setXY(135, 198);
    AngleValue.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    AngleValue.setLinespacing(0);
    Unicode::snprintf(AngleValueBuffer, ANGLEVALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_BNFN).getText());
    AngleValue.setWildcard(AngleValueBuffer);
    AngleValue.resizeToCurrentText();
    AngleValue.setTypedText(touchgfx::TypedText(T___SINGLEUSE_QZNR));
    add(AngleValue);

    RadiusValue.setXY(168, 233);
    RadiusValue.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    RadiusValue.setLinespacing(0);
    Unicode::snprintf(RadiusValueBuffer, RADIUSVALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_FIY1).getText());
    RadiusValue.setWildcard(RadiusValueBuffer);
    RadiusValue.resizeToCurrentText();
    RadiusValue.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NTTT));
    add(RadiusValue);

    LoadValue.setXY(190, 129);
    LoadValue.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    LoadValue.setLinespacing(0);
    Unicode::snprintf(LoadValueBuffer, LOADVALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_3HXJ).getText());
    LoadValue.setWildcard(LoadValueBuffer);
    LoadValue.resizeToCurrentText();
    LoadValue.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LT2B));
    add(LoadValue);

    SWLValue.setXY(260, 17);
    SWLValue.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    SWLValue.setLinespacing(0);
    Unicode::snprintf(SWLValueBuffer, SWLVALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_SI7D).getText());
    SWLValue.setWildcard(SWLValueBuffer);
    SWLValue.resizeToCurrentText();
    SWLValue.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4NI4));
    add(SWLValue);

    noOverLoaded.setXY(425, 17);
    noOverLoaded.setBitmap(touchgfx::Bitmap(BITMAP_OL_NOT_ACTIVATE_ID));
    add(noOverLoaded);

    Overloaded.setXY(425, 16);
    Overloaded.setBitmap(touchgfx::Bitmap(BITMAP_OL_ACTIVATED_ID));
    Overloaded.setVisible(false);
    add(Overloaded);

    AngleLimitButton.setXY(421, 50);
    AngleLimitButton.setBitmap(touchgfx::Bitmap(BITMAP_ANGLELIMIT_NORMAL_ID));
    add(AngleLimitButton);

    AngleLimitButton_A.setXY(420, 48);
    AngleLimitButton_A.setBitmap(touchgfx::Bitmap(BITMAP_ANGLELIMIT_ACTIVATED_ID));
    AngleLimitButton_A.setVisible(false);
    add(AngleLimitButton_A);

    ATBButton.setXY(413, 93);
    ATBButton.setBitmap(touchgfx::Bitmap(BITMAP_ATB_NORMAL_ID));
    add(ATBButton);

    ATBButton_A.setXY(413, 93);
    ATBButton_A.setBitmap(touchgfx::Bitmap(BITMAP_ATB_ACTIVATED_ID));
    ATBButton_A.setVisible(false);
    add(ATBButton_A);

    BypassButton.setXY(380, 129);
    BypassButton.setBitmap(touchgfx::Bitmap(BITMAP_BYPASS_NORMAL_ID));
    add(BypassButton);

    BypassButton_A.setXY(380, 126);
    BypassButton_A.setBitmap(touchgfx::Bitmap(BITMAP_BYPASS_ACTIVATED_ID));
    BypassButton_A.setVisible(false);
    add(BypassButton_A);
}

WorkingScreenViewBase::~WorkingScreenViewBase()
{

}

void WorkingScreenViewBase::setupScreen()
{

}
